<!DOCTYPE html>

<head>
    <link rel="icon" href="data:;base64,=">
    <meta charset="UTF-8">
    <script type="module">
        (async () => {
            try {
                // Step 1: Request device code
                let response = await fetch("$KEYCLOAK_URL/realms/$KEYCLOAK_REALM/protocol/openid-connect/auth/device", {
                    method: "POST",
                    body: new URLSearchParams({
                        'scope': 'openid',
                        'client_id': '$KEYCLOAK_CLIENT_ID'
                    })
                });
                const deviceAuth = await response.json();
                if (!response.ok) {
                    alert("Unable to start device flow: " + JSON.stringify(deviceAuth));
                    return;
                }

                // Step 2: Display verification info to user
                const outer = document.createElement("div");
                outer.style.display = 'flex';
                outer.style.justifyContent = 'center';
                outer.style.alignItems = 'center';
                outer.style.height = '100vh';
                outer.style.margin = '0';
                outer.style.fontFamily = 'sans-serif';

                const container = document.createElement("div");
                container.style.textAlign = 'center';
                container.style.padding = '2em';
                container.style.borderRadius = '8px';
                container.style.boxShadow = '0 2px 4px rgba(0,0,0,0.1)';

                const title = document.createElement("h2");
                title.innerText = "MGW Cloud Activation";
                container.appendChild(title);

                window.open(deviceAuth.verification_uri_complete, '_blank');

                const instructions = document.createElement("p");
                instructions.innerHTML =
                    `A browser tab should have opened automatically. If it didn't, please click 
            <a href="${deviceAuth.verification_uri_complete}" target="_blank" class="external-link">
                here<svg xmlns="http://www.w3.org/2000/svg"
                    width="14" height="14" viewBox="0 0 24 24"
                    fill="none" stroke="currentColor" stroke-width="2"
                    stroke-linecap="round" stroke-linejoin="round"
                    style="margin-left:4px; position:relative; top:-2px;">
                <path d="M18 13v6a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"/>
                <polyline points="15 3 21 3 21 9"/>
                <line x1="10" y1="14" x2="21" y2="3"/>
                </svg>
            </a>.`;

                container.appendChild(instructions);

                const codeContainer = document.createElement("div");
                codeContainer.style.display = 'flex';
                codeContainer.style.alignItems = 'center';
                codeContainer.style.justifyContent = 'center';
                codeContainer.style.gap = '10px';
                codeContainer.style.padding = '0.5em';
                codeContainer.style.margin = '1em 0';
                codeContainer.style.backgroundColor = '#f5f5f5';
                codeContainer.style.borderRadius = '4px';

                const codeLabel = document.createElement("span");
                codeLabel.style.fontSize = '24px';
                codeLabel.innerText = 'Code: ';

                const codeText = document.createElement("span");
                codeText.style.fontSize = '24px';
                codeText.style.fontWeight = 'bold';
                codeText.innerText = deviceAuth.user_code;

                codeContainer.appendChild(codeLabel);
                codeContainer.appendChild(codeText);
                container.appendChild(codeContainer);

                const status = document.createElement("p");
                status.innerText = "Waiting for authorization";

                // Create loading dots animation
                const dots = document.createElement("span");
                dots.style.width = '40px';
                dots.style.display = 'inline-block';
                dots.style.textAlign = 'left';
                status.appendChild(dots);
                let dotCount = 0;
                setInterval(() => {
                    dots.textContent = '.'.repeat(dotCount + 1);
                    dotCount = (dotCount + 1) % 5;
                }, 500);

                status.style.display = 'flex';
                status.style.alignItems = 'center';
                status.style.justifyContent = 'center';
                status.style.gap = '4px';

                container.appendChild(status);

                outer.appendChild(container);
                document.body.innerHTML = '';
                document.body.appendChild(outer);

                // Step 3: Poll for token
                const startTime = Date.now();
                const pollInterval = deviceAuth.interval * 1000;
                const expiresIn = deviceAuth.expires_in * 1000;

                while (Date.now() - startTime < expiresIn) {
                    await new Promise(resolve => setTimeout(resolve, pollInterval));

                    try {
                        const tokenResponse = await fetch("$KEYCLOAK_URL/realms/$KEYCLOAK_REALM/protocol/openid-connect/token", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/x-www-form-urlencoded",
                            },
                            body: new URLSearchParams({
                                grant_type: "urn:ietf:params:oauth:grant-type:device_code",
                                client_id: "$KEYCLOAK_CLIENT_ID",
                                device_code: deviceAuth.device_code
                            })
                        });

                        if (tokenResponse.ok) {
                            const tokenData = await tokenResponse.json();

                            // Step 4: Call the refresh endpoint with the obtained token
                            const refreshResponse = await fetch("api/refresh", {
                                method: "PATCH",
                                headers: {
                                    "Authorization": `Bearer ${tokenData.access_token}`
                                }
                            });

                            if (refreshResponse.ok) {
                                // Show success message
                                container.innerHTML = '';
                                const successIcon = document.createElement("h2");
                                successIcon.innerText = "âœ“ Successfully paired!";
                                container.appendChild(successIcon);

                                const successMsg = document.createElement("p");
                                successMsg.innerText = "You can close this window now.";
                                container.appendChild(successMsg);

                                container.style.backgroundColor = "#31c42c";
                                container.style.color = "white";
                                return;
                            } else {
                                const error = await refreshResponse.json();
                                throw new Error("Failed to refresh: " + JSON.stringify(error));
                            }
                        } else if (tokenResponse.status === 400) {
                            const error = await tokenResponse.json();
                            if (error.error === "authorization_pending") {
                                // Still waiting for user authorization
                                continue;
                            } else if (error.error === "expired_token") {
                                throw new Error("Device code expired. Please try again.");
                            } else {
                                throw new Error("Token error: " + JSON.stringify(error));
                            }
                        } else {
                            throw new Error("Unexpected response: " + tokenResponse.status);
                        }
                    } catch (error) {
                        if (error.message.includes("expired")) {
                            status.innerText = "Authorization timeout. Please refresh to try again.";
                            status.style.color = "red";
                            return;
                        }
                        // For other errors, continue polling
                        console.error("Polling error:", error);
                    }
                }

                status.innerText = "Authorization timeout. Please refresh to try again.";
                status.style.color = "red";
            } catch (error) {
                alert('Failed to complete device authorization: ' + error);
            }
        })();    
    </script>
</head>

<body>
</body>